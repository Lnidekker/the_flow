#!/usr/bin/env bash

tf_help_message="
Description: start THE FLOW execution.

Usage: the_flow [-path <str>] [-syn] [-impl] [-atpg] [-power] [-formal] [-ui_mode [interactive] [terminal]] [-update_run_dir [all] [cfg] [step_scripts] [input_data]] [-from_step <str>] [-to_step <str>] [-step <str>] [-help]

    -path <str> :
        absolute path to directory which consists tf_var.py file

    -syn :
        execute synthesis flow

    -impl :
        execute implementation flow

    -atpg :
        execute ATPG flow

    -power :
        execute power analysis flow

    -formal :
        execute formal verification flow

    -ui_mode [interactive] [terminal] :
        interactive - (default) turn on THE FLOW ui functional
        terminal    - automatically set TF-Q2 = 1 and turn off xterm using

    -update_run_dir [all] [cfg] [step_scripts] [input_data] :
        all          - delete experiment directory if this already exists and continue THE FLOW execution
        cfg          - update config files if these already exist in experiment directory and continue THE FLOW execution
        step_scripts - update step .tcl scripts if these already exist in experiment directory and continue THE FLOW execution
        input_data   - update input data if these already exist in experiment directory and continue THE FLOW execution

        Note :
            - this option used only with [-ui_mode terminal]
            - if [-ui_mode terminal] option used without [-update_run_dir] experiment directory will not changed

    -from_step <str> :
        start THE FLOW execution from chosen step which db already exists (the same like TF-Q3 = 2)

        Note:
            - this option is used only with [-ui_mode terminal]
            - if [-ui_mode terminal] option used without [-from_step] steps with existing db are passed (the same like TF-Q3 = 1)

    -to_step <str> :
        finish THE FLOW execution when chosen step will done

        Note:
            - this option is used only with [-ui_mode terminal]

    -step <str> :
        execute only one step

        Note:
            - this option is used only with [-ui_mode terminal]

    -help :
        show help message in terminal window
"

argument_flag=0
argument_number=""
argument_value=()

tf_path=""
tf_is_syn=0
tf_is_impl=0
tf_is_atpg=0
tf_is_power=0
tf_ui_mode=""
tf_update_run_dir=0
tf_update_all=0
tf_update_cfg=0
tf_update_step_scripts=0
tf_update_input_data=0
tf_from_step=0
tf_from_step_name=""
tf_to_step=0
tf_to_step_name=""
tf_only_step=0
tf_only_step_name=""
tf_is_folmal=0

tf_start_dir=$(pwd)

for i in "$@"
  do
  argument_flag=$((argument_flag + 1))
  argument_number="$argument_number $argument_flag"
  argument_value[argument_flag]="$i"
done

if [[ $argument_number == "" ]] ; then
  echo "$tf_help_message"
else
  for ((j = 1 ; j <= $# ; j++))
  do
    if [[ ${argument_value[$j]} == "-path" ]] ; then
      if [ ! -d "${argument_value[$j + 1]}" ] ; then
        echo -e "\e[31mTF_ERROR   : Directory ${argument_value[$j + 1]} doesn't exist. Please, check [-path <str>] option value and rerun.\e[0m"
        exit
      else
        tf_path=${argument_value[$j + 1]}
      fi
    elif [[ ${argument_value[$j]} == "-syn" ]] ; then
      tf_is_syn=1
    elif [[ ${argument_value[$j]} == "-impl" ]] ; then
      tf_is_impl=1
    elif [[ ${argument_value[$j]} == "-atpg" ]] ; then
      tf_is_atpg=1
    elif [[ ${argument_value[$j]} == "-power" ]] ; then
      tf_is_power=1
    elif [[ ${argument_value[$j]} == "-formal" ]] ; then
      tf_is_folmal=1
    elif [[ ${argument_value[$j]} == "-ui_mode" ]] ; then
      if [[ ${argument_value[$j + 1]} == "interactive" ]] ; then
        tf_ui_mode="interactive"
      elif [[ ${argument_value[$j + 1]} == "terminal" ]] ; then
        tf_ui_mode="terminal"
      else
        echo -e "\e[31mTF_ERROR   : Unknown value for [-ui_mode [interactive] [terminal]] option. Please, run [the_flow -help] and read description.\e[0m"
        exit
      fi
    elif [[ ${argument_value[$j]} == "-update_run_dir" ]] ; then
      tf_update_run_dir=1
      #if [[ $tf_ui_mode != "terminal" ]] ; then
      #  echo -e "\e[31mTF_ERROR   : Please, use option [-ui_mode terminal] before [-update_run_dir].\e[0m"
      #  exit
      #else
      for ((n = 1 ; n <= $# ; n++))
      do
        if [[ ${argument_value[$n]} == "all" ]] ; then
          tf_update_all=1
        elif [[ ${argument_value[$n]} == "cfg" ]] ; then
          tf_update_cfg=1
        elif [[ ${argument_value[$n]} == "step_scripts" ]] ; then
          tf_update_step_scripts=1
        elif [[ ${argument_value[$n]} == "input_data" ]] ; then
          tf_update_input_data=1
        fi
      done
      #fi
    elif [[ ${argument_value[$j]} == "-from_step" ]] ; then
      tf_from_step=1
      if [[ $tf_ui_mode != "terminal" ]] ; then
        echo -e "\e[31mTF_ERROR   : Please, use option [-ui_mode terminal] before [-from_step].\e[0m"
        exit
      else
        tf_from_step_name=${argument_value[$j + 1]}
      fi
    elif [[ ${argument_value[$j]} == "-to_step" ]] ; then
      tf_to_step=1
      if [[ $tf_ui_mode != "terminal" ]] ; then
        echo -e "\e[31mTF_ERROR   : Please, use option [-ui_mode terminal] before [-to_step].\e[0m"
        exit
      else
        tf_to_step_name=${argument_value[$j + 1]}
      fi
    elif [[ ${argument_value[$j]} == "-step" ]] ; then
      tf_only_step=1
      if [[ $tf_ui_mode != "terminal" ]] ; then
        echo -e "\e[31mTF_ERROR   : Please, use option [-ui_mode terminal] before [-step].\e[0m"
        exit
      else
        tf_only_step_name=${argument_value[$j + 1]}
      fi
    elif [[ ${argument_value[$j]} == "-help" ]] ; then
      echo "$tf_help_message"
    else
      if [[ ${argument_value[$j]} != "interactive" &&
            ${argument_value[$j]} != "terminal" &&
            ${argument_value[$j]} != "$tf_path" &&
            ${argument_value[$j]} != "all" &&
            ${argument_value[$j]} != "cfg" &&
            ${argument_value[$j]} != "step_scripts" &&
            ${argument_value[$j]} != "input_data" &&
            ${argument_value[$j]} != "$tf_from_step_name" &&
            ${argument_value[$j]} != "$tf_to_step_name" &&
            ${argument_value[$j]} != "$tf_only_step_name"
            ]] ; then
        echo -e "\e[31mTF_ERROR   : Unknown option is [${argument_value[$j]}]. Please, run [the_flow -help] and read description.\e[0m"
        exit
      fi
    fi
  done
fi

#if [[ $tf_path == "" ]] ; then
#  echo -e "\e[31mTF_ERROR   : [-path <str>] option is mandatory. Please, set [-path <str>] option and rerun.\e[0m"
#  exit
#fi

if [[ $tf_is_syn == 1 && $tf_is_impl == 1 ]] ; then
  echo -e "\e[31mTF_ERROR   : Can't use [-syn] and [-impl] options the same time. This functional will be added in future major release.\e[0m"
  exit
elif [[ $tf_is_syn == 0 &&  $tf_is_impl == 0 && $tf_is_atpg == 0 && $tf_is_power == 0 ]] ; then
  echo -e "\e[31mTF_ERROR   : Choose one of mandatory option [-syn], [-impl], [-atpg] or [-power].\e[0m"
  exit
fi

if [[ $tf_ui_mode == "" ]] ; then
  tf_ui_mode="interactive"
fi

if [[ $tf_ui_mode != "" && $tf_ui_mode != "interactive" && $tf_ui_mode != "terminal" ]] ; then
  echo -e "\e[31mTF_ERROR   : $tf_ui_mode option for [-ui_mode] doesn\'t exist.\e[0m"
  exit
fi

#if [[ $tf_ui_mode == "terminal" && $tf_update_run_dir == 0 ]] ; then
#  echo "Please, use [-update_run_dir [all] [cfg] [step_scripts] [input_data]] after [-ui_mode terminal]."
#  exit
#fi

if [[ $tf_update_run_dir == 1 ]] ; then
  if [[ $tf_update_all == 0 && $tf_update_cfg == 0 && $tf_update_step_scripts == 0 && $tf_update_input_data == 0 ]] ; then
    echo -e "\e[31mTF_ERROR   : Choose at least one of the following options [-update_run_dir [all] [cfg] [step_scripts] [input_data]].\e[0m"
    exit
  fi
  if [[ $tf_update_all == 1 ]] ; then
    if [[ $tf_update_cfg == 1 || $tf_update_step_scripts == 1 || $tf_update_input_data == 1 ]] ; then
      echo -e "\e[31mTF_ERROR   : You cannot use [all] and other options at the same time.\e[0m"
      exit
    fi
  fi
  if [[ $tf_ui_mode != "terminal" ]] ; then
    echo -e "\e[31mTF_ERROR   : You cannot use [-update_run_dir] option without [-ui_mode terminal].\e[0m"
    exit
  fi
fi

if [[ $tf_only_step == 1 && $tf_from_step == 1 ]] ; then
  echo -e "\e[31mTF_ERROR   : You cannot use [-step] and [-from_step] options at the same time.\e[0m"
  exit
fi

if [[ $tf_only_step == 1 && $tf_to_step == 1 ]] ; then
  echo -e "\e[31mTF_ERROR   : You cannot use [-step] and [-to_step] options at the same time.\e[0m"
  exit
fi

python3 "$(which the_flow)"_scripts.py \
        "$tf_path" \
        $tf_is_syn \
        $tf_is_impl \
        $tf_is_atpg \
        $tf_is_power \
        "$tf_ui_mode" \
        $tf_update_run_dir \
        $tf_update_all \
        $tf_update_cfg \
        $tf_update_step_scripts \
        $tf_update_input_data \
        $tf_from_step \
        "$tf_from_step_name" \
        "$tf_start_dir" \
        $tf_to_step \
        "$tf_to_step_name" \
        $tf_only_step \
        "$tf_only_step_name" \
        $tf_is_folmal
